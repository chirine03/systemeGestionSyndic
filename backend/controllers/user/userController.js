// getUserController.js
import { findUserById, updatePersonne, updateCompte, checkMailExists, checkPhoneExists } from '../../models/user/userModel.js';

// ‚úÖ Fonction de d√©chiffrement
const cesarDecrypt = (text, shift = 11) => {
  const shiftVal = 26 - shift;
  return text.split('').map(char => {
    if (/[a-zA-Z]/.test(char)) {
      const base = char === char.toUpperCase() ? 65 : 97;
      return String.fromCharCode(
        ((char.charCodeAt(0) - base + shiftVal) % 26) + base
      );
    }
    return char;
  }).join('');
};

// ‚úÖ Contr√¥leur
export const getUserData = async (req, res) => {
  const { id_personne } = req.query;

  if (!id_personne) {
    return res.json({ success: false, message: 'ID utilisateur non fourni.' });
  }

  try {
    const userData = await findUserById(id_personne);

    if (!userData) {
      return res.json({ success: false, message: 'Utilisateur introuvable.' });
    }

    // ‚úÖ D√©chiffrer le mot de passe ici
    userData.mot_de_passe = cesarDecrypt(userData.mot_de_passe);

    return res.json({ success: true, userData });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de l'utilisateur :", error);
    return res.status(500).json({ success: false, message: 'Erreur serveur.' });
  }
};

export const updateUser = async (req, res) => {
  const userData = req.body;

  if (!userData || !userData.id_personne) {
    return res.json({ success: false, message: "Donn√©es invalides" });
  }

  try {
    // üîç V√©rifier si l'email est d√©j√† utilis√©
    if (userData.mail) {
      const emailExists = await checkMailExists(userData.mail, userData.id_personne);
      if (emailExists) {
        return res.json({ success: false, message: "Email d√©j√† utilis√© par un autre utilisateur" });
      }
    }

    // üîç V√©rifier si le t√©l√©phone est d√©j√† utilis√©
    if (userData.telephone) {
      const phoneExists = await checkPhoneExists(userData.telephone, userData.id_personne);
      if (phoneExists) {
        return res.json({ success: false, message: "T√©l√©phone d√©j√† utilis√© par un autre utilisateur" });
      }
    }

    const personUpdated = await updatePersonne(userData);
    const accountUpdated = await updateCompte(userData);

    if (personUpdated || accountUpdated) {
      return res.json({ success: true, message: "Informations mises √† jour avec succ√®s" });
    } else {
      return res.json({ success: false, message: "Aucune modification effectu√©e" });
    }

  } catch (error) {
    console.error("Erreur lors de la mise √† jour :", error);
    return res.status(500).json({ success: false, message: "Erreur serveur" });
  }
};